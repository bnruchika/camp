# -*- coding: utf-8 -*-
# Generated by Django 1.11 on 2018-01-11 13:31
from __future__ import unicode_literals

import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_active', models.BooleanField(default=True)),
                ('is_admin', models.BooleanField(default=False)),
                ('is_staff', models.BooleanField(default=False)),
                ('fullname', models.CharField(default='Unknown', max_length=400)),
                ('gender', models.CharField(choices=[('male', 'Male'), ('female', 'Female'), ('others', 'Others')], default='undisclosed', max_length=10)),
                ('dob', models.DateField(default='1987-09-13')),
                ('is_doctor', models.BooleanField(default=False)),
                ('doctor_activated', models.BooleanField(default=False)),
                ('doctor_registration_number', models.CharField(default=None, max_length=50, null=True, verbose_name='Medical Council Registration Number')),
                ('doctor_date_of_reg', models.DateField(default=None, null=True, verbose_name='Date of Registration')),
                ('experience', models.IntegerField(default=0, verbose_name='Years of Experience')),
                ('doctor_available_time', models.CharField(default='', max_length=50, verbose_name='Available Times (9-1, 4-7)')),
                ('doctor_bio', models.TextField(blank=True, null=True, verbose_name='About Yourself')),
                ('doctor_specialization', models.CharField(blank=True, max_length=200, null=True, verbose_name='Fields of Specialization')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='StateMedicalCouncil',
            fields=[
                ('state_medical_council_id', models.IntegerField(primary_key=True, serialize=False, verbose_name='Enter medical code as per : https://www.mciindia.org/ActivitiWebClient/informationdesk/indianMedicalRegister')),
                ('state_medical_council_name', models.CharField(max_length=150)),
            ],
        ),
        migrations.AddField(
            model_name='user',
            name='doctor_state_medical_council',
            field=models.ForeignKey(default=None, null=True, on_delete=django.db.models.deletion.PROTECT, to='usermanagement.StateMedicalCouncil', verbose_name='Medical Council'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
